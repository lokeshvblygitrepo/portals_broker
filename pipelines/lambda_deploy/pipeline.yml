---

shared:
  - &failure-alert
    put: slack-alert
    params:
      channel: ((TEAM_CHANNEL))
      always_notify: true
      username: "Concource CI"
      silent: true
      icon_emoji: ":interrobang:"
      text: |
        *The <http://concoursecinew.mgmt.corvesta.net/teams/developer/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|$BUILD_PIPELINE_NAME - $BUILD_JOB_NAME> job failed!*

  - &success-alert
    put: slack-alert
    params:
      channel: ((TEAM_CHANNEL))
      always_notify: true
      username: "Concource CI"
      silent: true
      icon_emoji: ":rocket:"
      text: |
        *The <http://concoursecinew.mgmt.corvesta.net/teams/developer/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|$BUILD_PIPELINE_NAME - $BUILD_JOB_NAME> job passed!*

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: 038131160342.dkr.ecr.us-east-1.amazonaws.com/slack-notification-resource
    tag: latest
    aws_secret_access_key: ((MGMT_AWS_SECRET_ACCESS_KEY))
    aws_access_key_id: ((MGMT_AWS_ACCESS_KEY_ID))

- name: git-bitbucket-pr
  type: docker-image
  source:
    repository: zarplata/concourse-git-bitbucket-pr-resource

resources:

- name: slack-alert
  type: slack-notification
  source:
    url: ((slack_channel))

- name: resource-devops.ci
  type: git
  check_every: 5m
  check_timeout: 5m
  source:
    uri:  https://bitbucket.org/corvesta/devops.ci.git
    branch: ((CI_VERSION))
    username: ((bitbucket-username))
    password: ((bitbucket-apppassword))

- name: dev
  type: git
  check_timeout: 5m  
  source:
    uri: https://bitbucket.org/corvesta/((PROJECT)).git
    branch: develop
    username: ((bitbucket-username))
    password: ((bitbucket-apppassword))

- name: qa
  type: git
  check_timeout: 5m
  source:
    uri: https://bitbucket.org/corvesta/((PROJECT)).git
    branch: qa
    username: ((bitbucket-username))
    password: ((bitbucket-apppassword))

- name: stage
  type: git
  check_timeout: 5m
  source:
    uri: https://bitbucket.org/corvesta/((PROJECT)).git
    branch: stage
    username: ((bitbucket-username))
    password: ((bitbucket-apppassword))

- name: master
  type: git
  source:
    uri: https://bitbucket.org/corvesta/((PROJECT)).git
    branch: master
    username: ((bitbucket-username))
    password: ((bitbucket-apppassword))

- name: terraform_deploy
  type: docker-image
  check_timeout: 5m
  source:
    repository: 038131160342.dkr.ecr.us-east-1.amazonaws.com/concourseci-deploy
    tag: 0.13.3
    aws_secret_access_key: ((MGMT_AWS_SECRET_ACCESS_KEY))
    aws_access_key_id: ((MGMT_AWS_ACCESS_KEY_ID))

groups:
- name: development
  jobs:
  - deploy-((PROJECT))-lambda-job-to-dev

- name: qa
  jobs:
  - promote-((PROJECT))-and-deploy-to-qa

- name: stage
  jobs:
  - promote-((PROJECT))-and-deploy-to-stage
  - promote-((PROJECT))-and-deploy-to-train

- name: production
  jobs:
  - promote-((PROJECT))-preprod-and-deploy
  - promote-((PROJECT))-and-deploy-to-production

jobs:
- name: deploy-((PROJECT))-lambda-job-to-dev
  on_success: *success-alert
  on_failure: *failure-alert
  public: true
  plan:
    - in_parallel:
      - get: dev
        trigger: true
      - get: resource-devops.ci
      - get: terraform_deploy
    - task: terraform-deploy
      privileged: true
      image: terraform_deploy
      file: resource-devops.ci/tasks/lambda_terraform_deploy.yml
      input_mapping: {CODE: dev}
      params:
        TERRAFORM_ENV: development
        TERRAFORM_PROJECT: ((TERRAFORM_PROJECT))
        TERRAFORM_TEAM_TOKEN: ((TERRAFORM_TEAM_TOKEN))
        MGMT_AWS_SECRET_ACCESS_KEY: ((MGMT_AWS_SECRET_ACCESS_KEY))
        MGMT_AWS_ACCESS_KEY_ID: ((MGMT_AWS_ACCESS_KEY_ID))
        ENV_AWS_SECRET_ACCESS_KEY: ((DEV_AWS_SECRET_ACCESS_KEY))
        ENV_AWS_ACCESS_KEY_ID: ((DEV_AWS_ACCESS_KEY_ID))
        GIT_USERNAME: ((bitbucket-username))
        GIT_PASSWORD: ((bitbucket-apppassword))
        ARTIFACTORYPASSWORD: ((ARTIFACTORYPASSWORD))
        BUILD_TYPE: ((BUILD_TYPE))
        PIP_PATH: ((PIP_PATH))

- name: promote-((PROJECT))-and-deploy-to-qa
  on_success: *success-alert
  on_failure: *failure-alert
  public: true
  plan:
    - in_parallel:
      - get: qa
        trigger: true
      - get: resource-devops.ci
      - get: terraform_deploy
    - task: terraform-deploy
      privileged: true
      image: terraform_deploy
      file: resource-devops.ci/tasks/lambda_terraform_deploy.yml
      input_mapping: {CODE: qa}
      params:
        TERRAFORM_ENV: qa
        TERRAFORM_PROJECT: ((TERRAFORM_PROJECT))
        TERRAFORM_TEAM_TOKEN: ((TERRAFORM_TEAM_TOKEN))
        MGMT_AWS_SECRET_ACCESS_KEY: ((MGMT_AWS_SECRET_ACCESS_KEY))
        MGMT_AWS_ACCESS_KEY_ID: ((MGMT_AWS_ACCESS_KEY_ID))
        ENV_AWS_SECRET_ACCESS_KEY: ((QA_AWS_SECRET_ACCESS_KEY))
        ENV_AWS_ACCESS_KEY_ID: ((QA_AWS_ACCESS_KEY_ID))
        GIT_USERNAME: ((bitbucket-username))
        GIT_PASSWORD: ((bitbucket-apppassword))
        ARTIFACTORYPASSWORD: ((ARTIFACTORYPASSWORD))
        BUILD_TYPE: ((BUILD_TYPE))
        PIP_PATH: ((PIP_PATH))

- name: promote-((PROJECT))-and-deploy-to-stage
  on_success: *success-alert
  on_failure: *failure-alert
  public: true
  plan:
    - in_parallel:
      - get: stage
        trigger: true
      - get: resource-devops.ci
      - get: terraform_deploy
    - task: terraform-deploy
      privileged: true
      image: terraform_deploy
      file: resource-devops.ci/tasks/lambda_terraform_deploy.yml
      input_mapping: {CODE: stage}
      params:
        TERRAFORM_ENV: staging
        TERRAFORM_PROJECT: ((TERRAFORM_PROJECT))
        TERRAFORM_TEAM_TOKEN: ((TERRAFORM_TEAM_TOKEN))
        MGMT_AWS_SECRET_ACCESS_KEY: ((MGMT_AWS_SECRET_ACCESS_KEY))
        MGMT_AWS_ACCESS_KEY_ID: ((MGMT_AWS_ACCESS_KEY_ID))
        ENV_AWS_SECRET_ACCESS_KEY: ((STAGE_AWS_SECRET_ACCESS_KEY))
        ENV_AWS_ACCESS_KEY_ID: ((STAGE_AWS_ACCESS_KEY_ID))
        GIT_USERNAME: ((bitbucket-username))
        GIT_PASSWORD: ((bitbucket-apppassword))
        ARTIFACTORYPASSWORD: ((ARTIFACTORYPASSWORD))
        BUILD_TYPE: ((BUILD_TYPE))
        PIP_PATH: ((PIP_PATH))

- name: promote-((PROJECT))-and-deploy-to-train
  on_success: *success-alert
  on_failure: *failure-alert
  public: true
  plan:
    - in_parallel:
      - get: stage
        trigger: true
        passed: [promote-((PROJECT))-and-deploy-to-stage]
      - get: resource-devops.ci
      - get: terraform_deploy
    - task: terraform-deploy
      privileged: true
      image: terraform_deploy
      file: resource-devops.ci/tasks/lambda_terraform_deploy.yml
      input_mapping: {CODE: stage}
      params:
        TERRAFORM_ENV: training
        TERRAFORM_PROJECT: ((TERRAFORM_PROJECT))
        TERRAFORM_TEAM_TOKEN: ((TERRAFORM_TEAM_TOKEN))
        MGMT_AWS_SECRET_ACCESS_KEY: ((MGMT_AWS_SECRET_ACCESS_KEY))
        MGMT_AWS_ACCESS_KEY_ID: ((MGMT_AWS_ACCESS_KEY_ID))
        ENV_AWS_SECRET_ACCESS_KEY: ((TRAIN_AWS_SECRET_ACCESS_KEY))
        ENV_AWS_ACCESS_KEY_ID: ((TRAIN_AWS_ACCESS_KEY_ID))
        GIT_USERNAME: ((bitbucket-username))
        GIT_PASSWORD: ((bitbucket-apppassword))
        ARTIFACTORYPASSWORD: ((ARTIFACTORYPASSWORD))
        BUILD_TYPE: ((BUILD_TYPE))
        PIP_PATH: ((PIP_PATH))

- name: promote-((PROJECT))-preprod-and-deploy
  on_success: *success-alert
  on_failure: *failure-alert
  public: true
  plan:
    - in_parallel:
      - get: resource-devops.ci
      - get: terraform_deploy
      - get: master
        trigger: true
    - task: deploy-container-to-preprod
      privileged: true
      image: terraform_deploy
      file: resource-devops.ci/tasks/lambda_terraform_deploy.yml
      input_mapping: {CODE: master}
      params:
        TERRAFORM_ENV: preprod
        TERRAFORM_PROJECT: ((TERRAFORM_PROJECT))
        TERRAFORM_TEAM_TOKEN: ((TERRAFORM_TEAM_TOKEN))
        MGMT_AWS_SECRET_ACCESS_KEY: ((MGMT_AWS_SECRET_ACCESS_KEY))
        MGMT_AWS_ACCESS_KEY_ID: ((MGMT_AWS_ACCESS_KEY_ID))
        ENV_AWS_SECRET_ACCESS_KEY: ((PREP_AWS_SECRET_ACCESS_KEY))
        ENV_AWS_ACCESS_KEY_ID: ((PREP_AWS_ACCESS_KEY_ID))
        GIT_USERNAME: ((bitbucket-username))
        GIT_PASSWORD: ((bitbucket-apppassword))
        ARTIFACTORYPASSWORD: ((ARTIFACTORYPASSWORD))
        BUILD_TYPE: ((BUILD_TYPE))
        PIP_PATH: ((PIP_PATH))

- name: promote-((PROJECT))-and-deploy-to-production
  on_success: *success-alert
  on_failure: *failure-alert
  public: true
  plan:
    - in_parallel:
      - get: master
        passed: [promote-((PROJECT))-preprod-and-deploy]
      - get: resource-devops.ci
      - get: terraform_deploy
    - task: terraform-deploy
      privileged: true
      image: terraform_deploy
      file: resource-devops.ci/tasks/lambda_terraform_deploy.yml
      input_mapping: {CODE: master}
      params:
        TERRAFORM_ENV: prod
        TERRAFORM_PROJECT: ((TERRAFORM_PROJECT))
        TERRAFORM_TEAM_TOKEN: ((TERRAFORM_TEAM_TOKEN))
        MGMT_AWS_SECRET_ACCESS_KEY: ((MGMT_AWS_SECRET_ACCESS_KEY))
        MGMT_AWS_ACCESS_KEY_ID: ((MGMT_AWS_ACCESS_KEY_ID))
        ENV_AWS_SECRET_ACCESS_KEY: ((PROD_AWS_SECRET_ACCESS_KEY))
        ENV_AWS_ACCESS_KEY_ID: ((PROD_AWS_ACCESS_KEY_ID))
        GIT_USERNAME: ((bitbucket-username))
        GIT_PASSWORD: ((bitbucket-apppassword))
        ARTIFACTORYPASSWORD: ((ARTIFACTORYPASSWORD))
        BUILD_TYPE: ((BUILD_TYPE))
        PIP_PATH: ((PIP_PATH))
